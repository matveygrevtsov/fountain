{"ast":null,"code":"class FountainItem {\n  constructor(canvasRef, shotAngle, width, id) {\n    this.t = 0;\n    this.shotAngle = shotAngle;\n    this.width = width;\n    this.canvas = this.canvasRef.current;\n    this.context = this.canvasRef.current;\n    this.x = canvas.width - width / 2;\n    this.y = canvas.height;\n    this.id = id;\n  }\n\n  incrementTime() {\n    this.t += animationSpeed * period / 1000;\n  }\n\n  move() {\n    this.incrementTime();\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2;\n    this.y = y_0 - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > y_0 + 2 * this.width || this.y < -2 * this.width || this.x > canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n  resetParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion());\n    this.width = randomFromInterval(itemsSize);\n    this.x = canvas.width - this.width / 2;\n    this.y = canvas.height;\n  }\n\n  render() {\n    context.save();\n    context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1));\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    context.drawImage(imgSkins[this.id % imgSkins.length], this.x, this.y, this.width, this.width);\n    context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.itemsNumber = props.itemsNumber;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.imgSkins = props.imgSkinsRefs;\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.x_0 = canvas.width / 2;\n    this.y_0 = canvas.height;\n  }\n\n  start() {\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n    /*\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n    this.canvas = canvas\n    this.context = context\n    this.rootEl.appendChild(canvas)\n    */\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["FountainItem","constructor","canvasRef","shotAngle","width","id","t","canvas","current","context","x","y","height","incrementTime","animationSpeed","period","move","x_0","power","Math","cos","y_0","sin","g","resetParams","randomFromInterval","dispersion","itemsSize","render","save","translate","rotate","rotationSpeed","drawImage","imgSkins","length","restore","FountainAnimator","props","itemsNumber","spreadAngle","minItemsSize","maxItemsSize","gravity","imgSkinsRefs","setCanvasSize","window","innerWidth","innerHeight","start","addEventListener"],"mappings":"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","sourcesContent":["class FountainItem {\n  constructor(canvasRef, shotAngle, width, id) {\n    this.t = 0\n    this.shotAngle = shotAngle\n    this.width = width\n    this.canvas = this.canvasRef.current\n    this.context = this.canvasRef.current\n    this.x = canvas.width - width / 2\n    this.y = canvas.height\n    this.id = id\n  }\n\n  incrementTime() {\n    this.t += (animationSpeed * period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  resetParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = canvas.width - this.width / 2\n    this.y = canvas.height\n  }\n\n  render() {\n    context.save()\n    context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    context.drawImage(\n      imgSkins[this.id % imgSkins.length],\n      this.x,\n      this.y,\n      this.width,\n      this.width,\n    )\n    context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.itemsNumber = props.itemsNumber\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.imgSkins = props.imgSkinsRefs\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n    this.x_0 = canvas.width / 2\n    this.y_0 = canvas.height\n  }\n\n  start() {\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n\n    /*\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n    this.canvas = canvas\n    this.context = context\n    this.rootEl.appendChild(canvas)\n    */\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}