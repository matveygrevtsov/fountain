{"ast":null,"code":"class FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.itemsNumber = props.itemsNumber;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef.current;\n    this.context = this.canvas.getContext('2d');\n    this.imgSkins = props.imgSkinsRefs;\n    this.id = props.id;\n    this.shotAngle = props.shotAngle;\n    this.t = 0;\n    this.skin = props.skin;\n    this.x = this.canvas.width - width / 2;\n    this.y = this.canvas.height;\n  }\n\n  incrementTime() {\n    this.t += animationSpeed * period / 1000;\n  }\n\n  move() {\n    this.incrementTime();\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2;\n    this.y = y_0 - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > y_0 + 2 * this.width || this.y < -2 * this.width || this.x > this.canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion());\n    this.width = randomFromInterval(itemsSize);\n    this.x = this.canvas.width - this.width / 2;\n    this.y = this.canvas.height;\n  }\n\n  render() {\n    this.context.save();\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1));\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width);\n    this.context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.itemsNumber = props.itemsNumber;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.imgSkins = props.imgSkinsRefs; //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.x_0 = canvas.width / 2;\n    this.y_0 = canvas.height;\n  }\n\n  start() {\n    console.log('I`m rady !');\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["FountainItem","constructor","props","animationSpeed","power","itemsNumber","spreadAngle","itemsSize","minItemsSize","maxItemsSize","g","gravity","rotationSpeed","canvas","canvasRef","current","context","getContext","imgSkins","imgSkinsRefs","id","shotAngle","t","skin","x","width","y","height","incrementTime","period","move","x_0","Math","cos","y_0","sin","resetParams","setParams","randomFromInterval","dispersion","render","save","translate","rotate","drawImage","restore","FountainAnimator","setCanvasSize","window","innerWidth","innerHeight","start","console","log"],"mappings":"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","sourcesContent":["class FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.itemsNumber = props.itemsNumber\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.imgSkins = props.imgSkinsRefs\n    this.id = props.id\n    this.shotAngle = props.shotAngle\n    this.t = 0\n    this.skin = props.skin\n    this.x = this.canvas.width - width / 2\n    this.y = this.canvas.height\n  }\n\n  incrementTime() {\n    this.t += (animationSpeed * period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.itemsNumber = props.itemsNumber\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.imgSkins = props.imgSkinsRefs\n    //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n    this.x_0 = canvas.width / 2\n    this.y_0 = canvas.height\n  }\n\n  start() {\n    console.log('I`m rady !')\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}