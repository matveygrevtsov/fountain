{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nconst dispersion = spreadAngle => [Math.PI * (180 - spreadAngle) / 360, Math.PI * (180 + spreadAngle) / 360];\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.period = 60; // подумать\n\n    this.setBasis();\n    this.setParams();\n    window.addEventListener('resize', () => this.setBasis());\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion(this.spreadAngle));\n    this.width = randomFromInterval(this.itemsSize);\n    this.x = this.canvas.current.width - this.width / 2;\n    this.y = this.y_0;\n  }\n\n  incrementTime() {\n    this.t += this.animationSpeed * this.period / 1000;\n  }\n\n  move() {\n    this.incrementTime();\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2;\n    this.y = y_0 - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > y_0 + 2 * this.width || this.y < -2 * this.width || this.x > this.canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props;\n    this.canvas = props.canvasRef;\n    /*\n    this.congif = {\n      animationSpeed: props.animationSpeed,\n      power: props.power,\n      itemsNumber: props.itemsNumber,\n      spreadAngle: props.spreadAngle,\n      itemsSize: [props.minItemsSize, props.maxItemsSize],\n      g: props.gravity,\n      rotationSpeed: props.rotationSpeed,\n      canvas:  props.canvasRef.current,\n      context: props.canvasRef.current.getContext('2d'),\n    }\n    this.imgSkins = props.imgSkinsRefs*/\n\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n  }\n\n  start() {\n    //const el = new FountainItem(this.congif)\n    console.log('I`m ready !');\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","dispersion","spreadAngle","PI","FountainItem","constructor","props","animationSpeed","power","g","gravity","rotationSpeed","canvas","canvasRef","itemsSize","minItemsSize","maxItemsSize","period","setBasis","setParams","window","addEventListener","t","shotAngle","width","x","current","y","y_0","incrementTime","move","x_0","cos","sin","resetParams","FountainAnimator","state","setCanvasSize","innerWidth","height","innerHeight","start","console","log"],"mappings":"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","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\nconst dispersion = (spreadAngle) => [\n  (Math.PI * (180 - spreadAngle)) / 360,\n  (Math.PI * (180 + spreadAngle)) / 360,\n]\n\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.period = 60 // подумать\n    this.setBasis()\n    this.setParams()\n    window.addEventListener('resize', () => this.setBasis())\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion(this.spreadAngle))\n    this.width = randomFromInterval(this.itemsSize)\n    this.x = this.canvas.current.width - this.width / 2\n    this.y = this.y_0\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props\n    this.canvas = props.canvasRef\n    /*\n    this.congif = {\n      animationSpeed: props.animationSpeed,\n      power: props.power,\n      itemsNumber: props.itemsNumber,\n      spreadAngle: props.spreadAngle,\n      itemsSize: [props.minItemsSize, props.maxItemsSize],\n      g: props.gravity,\n      rotationSpeed: props.rotationSpeed,\n      canvas:  props.canvasRef.current,\n      context: props.canvasRef.current.getContext('2d'),\n    }\n    this.imgSkins = props.imgSkinsRefs*/\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n  }\n\n  start() {\n    //const el = new FountainItem(this.congif)\n    console.log('I`m ready !')\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}