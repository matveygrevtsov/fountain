{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.period = 60; // подумать\n\n    this.id = props.id;\n    this.skin = props.imgSkins[this.id % props.imgSkins.length];\n    this.setParams();\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval([Math.PI * (180 - this.spreadAngle) / 360, Math.PI * (180 + this.spreadAngle) / 360]);\n    this.width = randomFromInterval(this.itemsSize);\n    this.x = (this.canvas.current.width - this.width) / 2;\n    this.y = this.canvas.current.height;\n  }\n\n  incrementTime() {\n    this.t += this.animationSpeed * this.period / 1000;\n  }\n\n  move() {\n    const canvas = this.canvas.current;\n    this.incrementTime();\n    this.x = (canvas.width - this.width) / 2 + this.power * this.t * Math.cos(this.shotAngle);\n    this.y = canvas.height - this.power * this.t * Math.sin(this.shotAngle) + this.g * this.t * this.t / 2;\n\n    if (this.y > canvas.height + 2 * this.width || this.y < -2 * this.width || this.x > canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.setParams();\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d');\n    context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1));\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width);\n    context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props;\n    this.canvas = props.canvasRef;\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n  }\n\n  start() {\n    const items = [];\n\n    for (let i = 0; i < this.state.itemsNumber; i++) {\n      items.push(new FountainItem({ ...this.state,\n        i\n      }));\n    }\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","FountainItem","constructor","props","animationSpeed","power","g","gravity","rotationSpeed","canvas","canvasRef","spreadAngle","itemsSize","minItemsSize","maxItemsSize","period","id","skin","imgSkins","length","setParams","t","shotAngle","PI","width","x","current","y","height","incrementTime","move","cos","sin","render","context","getContext","translate","rotate","drawImage","restore","FountainAnimator","state","setCanvasSize","window","addEventListener","innerWidth","innerHeight","start","items","i","itemsNumber","push"],"mappings":"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","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.period = 60 // подумать\n    this.id = props.id\n    this.skin = props.imgSkins[this.id % props.imgSkins.length]\n    this.setParams()\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval([\n      (Math.PI * (180 - this.spreadAngle)) / 360,\n      (Math.PI * (180 + this.spreadAngle)) / 360,\n    ])\n    this.width = randomFromInterval(this.itemsSize)\n    this.x = (this.canvas.current.width - this.width) / 2\n    this.y = this.canvas.current.height\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    const canvas = this.canvas.current\n    this.incrementTime()\n    this.x =\n      (canvas.width - this.width) / 2 +\n      this.power * this.t * Math.cos(this.shotAngle)\n    this.y =\n      canvas.height -\n      this.power * this.t * Math.sin(this.shotAngle) +\n      (this.g * this.t * this.t) / 2\n    if (\n      this.y > canvas.height + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.setParams()\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d')\n    context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1))\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width)\n    context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props\n    this.canvas = props.canvasRef\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n  }\n\n  start() {\n    const items = []\n    for (let i = 0; i < this.state.itemsNumber; i++) {\n      items.push(\n        new FountainItem(\n          {...this.state, i}\n        ),\n      )\n    }\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}