{"ast":null,"code":"class FountainItem {\n  constructor(canvasRef, id, power, shotAngle, width, skin) {\n    this.id = id;\n    this.power = power;\n    this.canvas = canvasRef.current;\n    this.width = width;\n    this.skin = skin;\n    this.t = 0;\n    this.context = this.canvas.getContext('2d');\n    this.x = this.canvas.width - width / 2;\n    this.y = this.canvas.height;\n  }\n\n  incrementTime() {\n    this.t += animationSpeed * period / 1000;\n  }\n\n  move() {\n    this.incrementTime();\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2;\n    this.y = y_0 - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > y_0 + 2 * this.width || this.y < -2 * this.width || this.x > this.canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion());\n    this.width = randomFromInterval(itemsSize);\n    this.x = this.canvas.width - this.width / 2;\n    this.y = this.canvas.height;\n  }\n\n  render() {\n    this.context.save();\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1));\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width);\n    this.context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.itemsNumber = props.itemsNumber;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.imgSkins = props.imgSkinsRefs; //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.x_0 = canvas.width / 2;\n    this.y_0 = canvas.height;\n  }\n\n  start() {\n    console.log('I`m rady !');\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["FountainItem","constructor","canvasRef","id","power","shotAngle","width","skin","canvas","current","t","context","getContext","x","y","height","incrementTime","animationSpeed","period","move","x_0","Math","cos","y_0","sin","g","resetParams","setParams","randomFromInterval","dispersion","itemsSize","render","save","translate","rotate","rotationSpeed","drawImage","restore","FountainAnimator","props","itemsNumber","spreadAngle","minItemsSize","maxItemsSize","gravity","imgSkins","imgSkinsRefs","setCanvasSize","window","innerWidth","innerHeight","start","console","log"],"mappings":"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","sourcesContent":["class FountainItem {\n  constructor(canvasRef, id, power, shotAngle, width, skin) {\n    this.id = id\n    this.power = power\n\n\n\n\n    this.canvas = canvasRef.current\n    \n    this.width = width\n    this.skin = skin\n    \n    this.t = 0\n    this.context = this.canvas.getContext('2d')\n    this.x = this.canvas.width - width / 2\n    this.y = this.canvas.height\n  }\n\n  incrementTime() {\n    this.t += (animationSpeed * period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.itemsNumber = props.itemsNumber\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.imgSkins = props.imgSkinsRefs\n    //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n    this.x_0 = canvas.width / 2\n    this.y_0 = canvas.height\n  }\n\n  start() {\n    console.log('I`m rady !')\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}