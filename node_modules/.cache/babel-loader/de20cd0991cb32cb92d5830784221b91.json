{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nconst dispersion = spreadAngle => [Math.PI * (180 - spreadAngle) / 360, Math.PI * (180 + spreadAngle) / 360];\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef.current;\n    this.context = props.canvasRef.current.getContext('2d');\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion(this.spreadAngle));\n    this.width = randomFromInterval(this.itemsSize);\n    this.x = this.canvas.width - this.width / 2;\n    this.y = this.canvas.height;\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props;\n    this.canvas = props.canvasRef.current;\n    /*\n    this.congif = {\n      animationSpeed: props.animationSpeed,\n      power: props.power,\n      itemsNumber: props.itemsNumber,\n      spreadAngle: props.spreadAngle,\n      itemsSize: [props.minItemsSize, props.maxItemsSize],\n      g: props.gravity,\n      rotationSpeed: props.rotationSpeed,\n      canvas:  props.canvasRef.current,\n      context: props.canvasRef.current.getContext('2d'),\n    }\n    this.imgSkins = props.imgSkinsRefs*/\n\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n  }\n\n  setCanvasSize() {\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n  }\n\n  start() {\n    //const el = new FountainItem(this.congif)\n    console.log('I`m ready !');\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","dispersion","spreadAngle","PI","FountainItem","constructor","props","animationSpeed","power","g","gravity","rotationSpeed","canvas","canvasRef","current","context","getContext","itemsSize","minItemsSize","maxItemsSize","setParams","t","shotAngle","width","x","y","height","FountainAnimator","state","setCanvasSize","window","addEventListener","innerWidth","innerHeight","start","console","log"],"mappings":"AAAA,MAAMA,kBAAkB,GAAIC,QAAD,IACzBC,IAAI,CAACC,MAAL,MAAiBF,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAvC,IAA8CA,QAAQ,CAAC,CAAD,CADxD;;AAGA,MAAMG,UAAU,GAAIC,WAAD,IAAiB,CACjCH,IAAI,CAACI,EAAL,IAAW,MAAMD,WAAjB,CAAD,GAAkC,GADA,EAEjCH,IAAI,CAACI,EAAL,IAAW,MAAMD,WAAjB,CAAD,GAAkC,GAFA,CAApC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,YAAN,CAAmB;AACjBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,cAAL,GAAsBD,KAAK,CAACC,cAA5B;AACA,SAAKC,KAAL,GAAaF,KAAK,CAACE,KAAnB;AACA,SAAKC,CAAL,GAASH,KAAK,CAACI,OAAf;AACA,SAAKC,aAAL,GAAqBL,KAAK,CAACK,aAA3B;AACA,SAAKC,MAAL,GAAcN,KAAK,CAACO,SAAN,CAAgBC,OAA9B;AACA,SAAKC,OAAL,GAAeT,KAAK,CAACO,SAAN,CAAgBC,OAAhB,CAAwBE,UAAxB,CAAmC,IAAnC,CAAf;AAEA,SAAKd,WAAL,GAAmBI,KAAK,CAACJ,WAAzB;AAEA,SAAKe,SAAL,GAAkB,CAACX,KAAK,CAACY,YAAP,EAAqBZ,KAAK,CAACa,YAA3B,CAAlB;AAKH;;AAEDC,EAAAA,SAAS,GAAG;AACV,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,SAAL,GAAiBzB,kBAAkB,CAACI,UAAU,CAAC,KAAKC,WAAN,CAAX,CAAnC;AACA,SAAKqB,KAAL,GAAa1B,kBAAkB,CAAC,KAAKoB,SAAN,CAA/B;AACA,SAAKO,CAAL,GAAS,KAAKZ,MAAL,CAAYW,KAAZ,GAAoB,KAAKA,KAAL,GAAa,CAA1C;AACA,SAAKE,CAAL,GAAS,KAAKb,MAAL,CAAYc,MAArB;AACD;;AAxBgB;;AA2BnB,MAAMC,gBAAN,CAAuB;AACrBtB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKsB,KAAL,GAAatB,KAAb;AACA,SAAKM,MAAL,GAAcN,KAAK,CAACO,SAAN,CAAgBC,OAA9B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKe,aAAL;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM,KAAKF,aAAL,EAAxC;AACD;;AAEDA,EAAAA,aAAa,GAAG;AACd,SAAKjB,MAAL,CAAYW,KAAZ,GAAoBO,MAAM,CAACE,UAA3B;AACA,SAAKpB,MAAL,CAAYc,MAAZ,GAAqBI,MAAM,CAACG,WAA5B;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD;;AA7BoB;;AAgCvB,eAAeT,gBAAf","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\nconst dispersion = (spreadAngle) => [\n  (Math.PI * (180 - spreadAngle)) / 360,\n  (Math.PI * (180 + spreadAngle)) / 360,\n]\n\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\nclass FountainItem {\n  constructor(props) {\n      this.animationSpeed = props.animationSpeed\n      this.power = props.power\n      this.g = props.gravity\n      this.rotationSpeed = props.rotationSpeed\n      this.canvas = props.canvasRef.current\n      this.context = props.canvasRef.current.getContext('2d')\n      \n      this.spreadAngle = props.spreadAngle\n\n      this.itemsSize  = [props.minItemsSize, props.maxItemsSize]\n      \n      \n\n    \n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion(this.spreadAngle))\n    this.width = randomFromInterval(this.itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props\n    this.canvas = props.canvasRef.current\n    /*\n    this.congif = {\n      animationSpeed: props.animationSpeed,\n      power: props.power,\n      itemsNumber: props.itemsNumber,\n      spreadAngle: props.spreadAngle,\n      itemsSize: [props.minItemsSize, props.maxItemsSize],\n      g: props.gravity,\n      rotationSpeed: props.rotationSpeed,\n      canvas:  props.canvasRef.current,\n      context: props.canvasRef.current.getContext('2d'),\n    }\n    this.imgSkins = props.imgSkinsRefs*/\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.width = window.innerWidth\n    this.canvas.height = window.innerHeight\n  }\n\n  start() {\n    //const el = new FountainItem(this.congif)\n    console.log('I`m ready !')\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}