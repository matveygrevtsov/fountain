{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nconst loadImage = src => new Promise((resolve, reject) => {\n  const img = new Image();\n  img.src = src;\n\n  img.onload = () => resolve(img);\n\n  img.onerror = err => reject(err);\n});\n\nconst loadImages = arrayOfSrc => Promise.all(arrayOfSrc.map(src => loadImage(src))); // Period = ms / fps\n\n\nconst getPeriodCalculator = () => {\n  let prevTimestamp = 0;\n  return timestamp => {\n    const res = timestamp < 500 ? 0 : timestamp - prevTimestamp;\n    prevTimestamp = timestamp;\n    return res;\n  };\n};\n\nconst periodCalculator = getPeriodCalculator();\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.spreadAngle = props.spreadAngle;\n    this.g = props.gravity;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.rotationSpeed = props.rotationSpeed;\n    this.skin = props.skin;\n    this.canvas = props.canvasRef;\n    this.id = props.id;\n    this.resetParams();\n    this.t = randomFromInterval([-10, 0]);\n  }\n\n  resetParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval([Math.PI * (180 - this.spreadAngle) / 360, Math.PI * (180 + this.spreadAngle) / 360]);\n    this.width = randomFromInterval(this.itemsSize);\n    this.x = (this.canvas.current.width - this.width) / 2;\n    this.y = this.canvas.current.height;\n  }\n\n  incrementTime() {\n    this.t += this.animationSpeed * FountainItem.period / 1000;\n  }\n\n  move() {\n    const canvas = this.canvas.current;\n    this.incrementTime();\n    this.x = (canvas.width - this.width) / 2 + this.power * this.t * Math.cos(this.shotAngle);\n    this.y = canvas.height - this.power * this.t * Math.sin(this.shotAngle) + this.g * this.t * this.t / 2;\n\n    if (this.y > canvas.height + 2 * this.width || this.y < -2 * this.width || this.x > canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d');\n    context.save();\n    context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1));\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width);\n    context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props;\n    this.canvas = props.canvasRef;\n    this.context = props.canvasRef.current.context; //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n  }\n\n  start() {\n    loadImages(this.state.imgSkins).then(skins => {\n      const context = this.canvas.current.getContext('2d');\n      const items = [];\n\n      for (let i = 0; i < this.state.itemsNumber; i++) {\n        items.push(new FountainItem({ ...this.state,\n          skin: skins[i % skins.length],\n          id: i\n        }));\n      }\n\n      const tick = timestamp => {\n        requestAnimationFrame(tick);\n        FountainItem.period = periodCalculator(timestamp);\n        context.clearRect(0, 0, this.canvas.current.width, this.canvas.current.height);\n        items.forEach(item => item.render());\n      };\n\n      requestAnimationFrame(tick);\n    }, () => console.log('Не удалось загрузить картинки'));\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","loadImage","src","Promise","resolve","reject","img","Image","onload","onerror","err","loadImages","arrayOfSrc","all","map","getPeriodCalculator","prevTimestamp","timestamp","res","periodCalculator","FountainItem","constructor","props","animationSpeed","power","spreadAngle","g","gravity","itemsSize","minItemsSize","maxItemsSize","rotationSpeed","skin","canvas","canvasRef","id","resetParams","t","shotAngle","PI","width","x","current","y","height","incrementTime","period","move","cos","sin","render","context","getContext","save","translate","rotate","drawImage","restore","FountainAnimator","state","setCanvasSize","window","innerWidth","innerHeight","start","imgSkins","then","skins","items","i","itemsNumber","push","length","tick","requestAnimationFrame","clearRect","forEach","item","console","log"],"mappings":"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","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\nconst loadImage = (src) =>\n  new Promise((resolve, reject) => {\n    const img = new Image()\n    img.src = src\n    img.onload = () => resolve(img)\n    img.onerror = (err) => reject(err)\n  })\n\nconst loadImages = (arrayOfSrc) =>\n  Promise.all(arrayOfSrc.map((src) => loadImage(src)))\n\n// Period = ms / fps\nconst getPeriodCalculator = () => {\n  let prevTimestamp = 0\n  return (timestamp) => {\n    const res = timestamp < 500 ? 0 : timestamp - prevTimestamp\n    prevTimestamp = timestamp\n    return res\n  }\n}\n\nconst periodCalculator = getPeriodCalculator()\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.spreadAngle = props.spreadAngle\n    this.g = props.gravity\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.rotationSpeed = props.rotationSpeed\n    this.skin = props.skin\n    this.canvas = props.canvasRef\n    this.id = props.id\n    this.resetParams()\n    this.t = randomFromInterval([-10, 0])\n  }\n\n  resetParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval([\n      (Math.PI * (180 - this.spreadAngle)) / 360,\n      (Math.PI * (180 + this.spreadAngle)) / 360,\n    ])\n    this.width = randomFromInterval(this.itemsSize)\n    this.x = (this.canvas.current.width - this.width) / 2\n    this.y = this.canvas.current.height\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * FountainItem.period) / 1000\n  }\n\n  move() {\n    const canvas = this.canvas.current\n    this.incrementTime()\n    this.x =\n      (canvas.width - this.width) / 2 +\n      this.power * this.t * Math.cos(this.shotAngle)\n    this.y =\n      canvas.height -\n      this.power * this.t * Math.sin(this.shotAngle) +\n      (this.g * this.t * this.t) / 2\n    if (\n      this.y > canvas.height + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d')\n    context.save()\n    context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1))\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width)\n    context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props\n    this.canvas = props.canvasRef\n    this.context = props.canvasRef.current.context\n    //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n  }\n\n  start() {\n    loadImages(this.state.imgSkins).then(\n      (skins) => {\n        const context = this.canvas.current.getContext('2d')\n        const items = []\n        for (let i = 0; i < this.state.itemsNumber; i++) {\n          items.push(\n            new FountainItem({\n              ...this.state,\n              skin: skins[i % skins.length],\n              id: i,\n            }),\n          )\n        }\n        const tick = (timestamp) => {\n          requestAnimationFrame(tick)\n          FountainItem.period = periodCalculator(timestamp)\n          context.clearRect(\n            0,\n            0,\n            this.canvas.current.width,\n            this.canvas.current.height,\n          )\n          items.forEach((item) => item.render())\n        }\n        requestAnimationFrame(tick)\n      },\n      () => console.log('Не удалось загрузить картинки'),\n    )\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}