{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nconst dispersionAngle = () => [Math.PI * (180 - spreadAngle) / 360, Math.PI * (180 + spreadAngle) / 360];\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.spreadAngle = props.spreadAngle;\n    this.size = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef.current;\n    this.context = this.canvas.getContext('2d');\n    this.id = props.id;\n    this.shotAngle = props.shotAngle;\n    this.t = 0;\n    this.skin = props.skin;\n    this.x = this.canvas.width - width / 2;\n    this.y = this.canvas.height;\n  }\n\n  incrementTime() {\n    this.t += animationSpeed * period / 1000;\n  }\n\n  move() {\n    this.incrementTime();\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2;\n    this.y = y_0 - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > y_0 + 2 * this.width || this.y < -2 * this.width || this.x > this.canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion());\n    this.width = randomFromInterval(itemsSize);\n    this.x = this.canvas.width - this.width / 2;\n    this.y = this.canvas.height;\n  }\n\n  render() {\n    this.context.save();\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1));\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width);\n    this.context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.itemsNumber = props.itemsNumber;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.imgSkins = props.imgSkinsRefs; //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.x_0 = canvas.width / 2;\n    this.y_0 = canvas.height;\n  }\n\n  start() {\n    console.log('I`m rady !');\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","dispersionAngle","PI","spreadAngle","FountainItem","constructor","props","animationSpeed","power","size","minItemsSize","maxItemsSize","g","gravity","rotationSpeed","canvas","canvasRef","current","context","getContext","id","shotAngle","t","skin","x","width","y","height","incrementTime","period","move","x_0","cos","y_0","sin","resetParams","setParams","dispersion","itemsSize","render","save","translate","rotate","drawImage","restore","FountainAnimator","itemsNumber","imgSkins","imgSkinsRefs","setCanvasSize","window","innerWidth","innerHeight","start","console","log"],"mappings":"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","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\n  const dispersionAngle = () => [\n    (Math.PI * (180 - spreadAngle)) / 360,\n    (Math.PI * (180 + spreadAngle)) / 360,\n  ]\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.spreadAngle = props.spreadAngle\n    this.size = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.shotAngle = props.shotAngle\n    this.t = 0\n    this.skin = props.skin\n    this.x = this.canvas.width - width / 2\n    this.y = this.canvas.height\n  }\n\n  incrementTime() {\n    this.t += (animationSpeed * period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.itemsNumber = props.itemsNumber\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.imgSkins = props.imgSkinsRefs\n    //this.setCanvasSize()\n    //window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n    this.x_0 = canvas.width / 2\n    this.y_0 = canvas.height\n  }\n\n  start() {\n    console.log('I`m rady !')\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}