{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nconst dispersion = spreadAngle => [Math.PI * (180 - spreadAngle) / 360, Math.PI * (180 + spreadAngle) / 360];\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = this.congif = {\n      animationSpeed: props.animationSpeed,\n      power: props.power,\n      itemsNumber: props.itemsNumber,\n      spreadAngle: props.spreadAngle,\n      itemsSize: [props.minItemsSize, props.maxItemsSize],\n      g: props.gravity,\n      rotationSpeed: props.rotationSpeed,\n      canvas: props.canvasRef.current,\n      context: props.canvasRef.current.getContext('2d')\n    };\n    this.imgSkins = props.imgSkinsRefs;\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n  }\n\n  setCanvasSize() {\n    this.congif.canvas.width = window.innerWidth;\n    this.congif.canvas.height = window.innerHeight;\n    this.x_0 = this.canvas.width / 2;\n    this.y_0 = this.canvas.height;\n  }\n\n  start() {\n    const el = new FountainItem(this.congif);\n    console.log('I`m ready !');\n  }\n\n}\n\nclass FountainItem extends FountainAnimator {\n  constructor(props) {\n    super(props);\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion(this.spreadAngle));\n    this.width = randomFromInterval(this.itemsSize);\n    this.x = this.canvas.width - this.width / 2;\n    this.y = this.canvas.height;\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","dispersion","spreadAngle","PI","FountainAnimator","constructor","props","state","congif","animationSpeed","power","itemsNumber","itemsSize","minItemsSize","maxItemsSize","g","gravity","rotationSpeed","canvas","canvasRef","current","context","getContext","imgSkins","imgSkinsRefs","setCanvasSize","window","addEventListener","width","innerWidth","height","innerHeight","x_0","y_0","start","el","FountainItem","console","log","setParams","t","shotAngle","x","y"],"mappings":"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","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\nconst dispersion = (spreadAngle) => [\n  (Math.PI * (180 - spreadAngle)) / 360,\n  (Math.PI * (180 + spreadAngle)) / 360,\n]\n\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = \n    this.congif = {\n      animationSpeed: props.animationSpeed,\n      power: props.power,\n      itemsNumber: props.itemsNumber,\n      spreadAngle: props.spreadAngle,\n      itemsSize: [props.minItemsSize, props.maxItemsSize],\n      g: props.gravity,\n      rotationSpeed: props.rotationSpeed,\n      canvas:  props.canvasRef.current,\n      context: props.canvasRef.current.getContext('2d'),\n    }\n    this.imgSkins = props.imgSkinsRefs\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.congif.canvas.width = window.innerWidth\n    this.congif.canvas.height = window.innerHeight\n    this.x_0 = this.canvas.width / 2\n    this.y_0 = this.canvas.height\n  }\n\n  start() {\n    const el = new FountainItem(this.congif)\n    console.log('I`m ready !')\n  }\n}\n\nclass FountainItem extends FountainAnimator {\n  constructor(props) {\n    super(props)\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion(this.spreadAngle))\n    this.width = randomFromInterval(this.itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}