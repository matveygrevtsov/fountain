{"ast":null,"code":"class FountainItem {\n  constructor(canvasRef, shotAngle, width, skin, id) {\n    this.canvas = canvasRef.current;\n    this.shotAngle = shotAngle;\n    this.width = width;\n    this.skin = skin;\n    this.id = id;\n    this.t = 0;\n    this.context = this.canvas.getContext('2d');\n    this.x = this.canvas.width - width / 2;\n    this.y = this.canvas.height;\n  }\n\n  incrementTime() {\n    this.t += animationSpeed * period / 1000;\n  }\n\n  move() {\n    this.incrementTime();\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2;\n    this.y = y_0 - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > y_0 + 2 * this.width || this.y < -2 * this.width || this.x > this.canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval(dispersion());\n    this.width = randomFromInterval(itemsSize);\n    this.x = this.canvas.width - this.width / 2;\n    this.y = this.canvas.height;\n  }\n\n  render() {\n    this.context.save();\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1));\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width);\n    this.context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.itemsNumber = props.itemsNumber;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.imgSkins = props.imgSkinsRefs;\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.x_0 = canvas.width / 2;\n    this.y_0 = canvas.height;\n  }\n\n  start() {\n    console.log('I`m ra');\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["FountainItem","constructor","canvasRef","shotAngle","width","skin","id","canvas","current","t","context","getContext","x","y","height","incrementTime","animationSpeed","period","move","x_0","power","Math","cos","y_0","sin","g","resetParams","setParams","randomFromInterval","dispersion","itemsSize","render","save","translate","rotate","rotationSpeed","drawImage","restore","FountainAnimator","props","itemsNumber","spreadAngle","minItemsSize","maxItemsSize","gravity","imgSkins","imgSkinsRefs","setCanvasSize","window","addEventListener","innerWidth","innerHeight","start","console","log"],"mappings":"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","sourcesContent":["class FountainItem {\n  constructor(canvasRef, shotAngle, width, skin, id) {\n    this.canvas = canvasRef.current\n    this.shotAngle = shotAngle\n    this.width = width\n    this.skin = skin\n    this.id = id\n    this.t = 0\n    this.context = this.canvas.getContext('2d')\n    this.x = this.canvas.width - width / 2\n    this.y = this.canvas.height\n  }\n\n  incrementTime() {\n    this.t += (animationSpeed * period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.itemsNumber = props.itemsNumber\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.imgSkins = props.imgSkinsRefs\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n    this.x_0 = canvas.width / 2\n    this.y_0 = canvas.height\n  }\n\n  start() {\n    console.log('I`m ra')\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}