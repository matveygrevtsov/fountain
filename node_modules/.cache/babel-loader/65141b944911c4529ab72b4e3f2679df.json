{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nconst loadImage = src => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = src;\n\n    img.onload = () => resolve(img);\n\n    img.onerror = err => reject(err);\n  });\n};\n\nconst loadImages = arrayOfSrc => Promise.all(arrayOfSrc.map(src => loadImage(src)));\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.period = 60; // подумать\n\n    this.id = props.id;\n    this.skin = props.imgSkins[this.id % props.imgSkins.length];\n    this.imgLoaded = false;\n    this.resetParams();\n  }\n\n  resetParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval([Math.PI * (180 - this.spreadAngle) / 360, Math.PI * (180 + this.spreadAngle) / 360]);\n    this.width = randomFromInterval(this.itemsSize);\n    this.x = (this.canvas.current.width - this.width) / 2;\n    this.y = this.canvas.current.height;\n  }\n\n  incrementTime() {\n    this.t += this.animationSpeed * this.period / 1000;\n  }\n\n  move() {\n    const canvas = this.canvas.current;\n    this.incrementTime();\n    this.x = (canvas.width - this.width) / 2 + this.power * this.t * Math.cos(this.shotAngle);\n    this.y = canvas.height - this.power * this.t * Math.sin(this.shotAngle) + this.g * this.t * this.t / 2;\n\n    if (this.y > canvas.height + 2 * this.width || this.y < -2 * this.width || this.x > canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d');\n    context.save();\n    context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1));\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width);\n    context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props;\n    this.canvas = props.canvasRef;\n    this.context = props.canvasRef.current.context;\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n  }\n\n  start() {\n    loadImages(this.state.imgSkins).then(skins => {});\n    const context = this.canvas.current.getContext('2d');\n    const items = [];\n\n    for (let i = 0; i < this.state.itemsNumber; i++) {\n      items.push(new FountainItem({ ...this.state,\n        id: i\n      }));\n    }\n\n    const tick = timestamp => {\n      requestAnimationFrame(tick);\n      context.clearRect(0, 0, this.canvas.current.width, this.canvas.current.height);\n      items.forEach(item => item.render());\n    };\n\n    requestAnimationFrame(tick);\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","loadImage","src","Promise","resolve","reject","img","Image","onload","onerror","err","loadImages","arrayOfSrc","all","map","FountainItem","constructor","props","animationSpeed","power","g","gravity","rotationSpeed","canvas","canvasRef","spreadAngle","itemsSize","minItemsSize","maxItemsSize","period","id","skin","imgSkins","length","imgLoaded","resetParams","t","shotAngle","PI","width","x","current","y","height","incrementTime","move","cos","sin","render","context","getContext","save","translate","rotate","drawImage","restore","FountainAnimator","state","setCanvasSize","window","addEventListener","innerWidth","innerHeight","start","then","skins","items","i","itemsNumber","push","tick","timestamp","requestAnimationFrame","clearRect","forEach","item"],"mappings":"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","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\nconst loadImage = (src) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.src = src\n    img.onload = () => resolve(img)\n    img.onerror = (err) => reject(err)\n  })\n}\n\nconst loadImages = (arrayOfSrc) =>\n  Promise.all(arrayOfSrc.map((src) => loadImage(src)))\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.period = 60 // подумать\n    this.id = props.id\n    this.skin = props.imgSkins[this.id % props.imgSkins.length]\n    this.imgLoaded = false\n    this.resetParams()\n  }\n\n  resetParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval([\n      (Math.PI * (180 - this.spreadAngle)) / 360,\n      (Math.PI * (180 + this.spreadAngle)) / 360,\n    ])\n    this.width = randomFromInterval(this.itemsSize)\n    this.x = (this.canvas.current.width - this.width) / 2\n    this.y = this.canvas.current.height\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    const canvas = this.canvas.current\n    this.incrementTime()\n    this.x =\n      (canvas.width - this.width) / 2 +\n      this.power * this.t * Math.cos(this.shotAngle)\n    this.y =\n      canvas.height -\n      this.power * this.t * Math.sin(this.shotAngle) +\n      (this.g * this.t * this.t) / 2\n    if (\n      this.y > canvas.height + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d')\n    context.save()\n    context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1))\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width)\n    context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props\n    this.canvas = props.canvasRef\n    this.context = props.canvasRef.current.context\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n  }\n\n  start() {\n    loadImages(this.state.imgSkins).then((skins) => {\n      \n    })\n    const context = this.canvas.current.getContext('2d')\n    const items = []\n    for (let i = 0; i < this.state.itemsNumber; i++) {\n      items.push(new FountainItem({ ...this.state, id: i }))\n    }\n    const tick = (timestamp) => {\n      requestAnimationFrame(tick)\n      context.clearRect(\n        0,\n        0,\n        this.canvas.current.width,\n        this.canvas.current.height,\n      )\n      items.forEach((item) => item.render())\n    }\n    requestAnimationFrame(tick)\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}