{"ast":null,"code":"class CanvasItem {\n  constructor(shotAngle, width, id) {\n    this.t = 0;\n    this.shotAngle = shotAngle;\n    this.width = width;\n    this.x = canvas.width - width / 2;\n    this.y = canvas.height;\n    this.id = id;\n  }\n\n  incrementTime() {\n    this.t += animationSpeed * period / 1000;\n  }\n\n  move() {\n    this.incrementTime();\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2;\n    this.y = y_0 - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > y_0 + 2 * this.width || this.y < -2 * this.width || this.x > canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.resetParams();\n    }\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.itemsNumber = props.itemsNumber;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.imgSkins = props.imgSkinsRefs;\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n    this.x_0 = canvas.width / 2;\n    this.y_0 = canvas.height;\n  }\n\n  start() {\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n    /*\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n    this.canvas = canvas\n    this.context = context\n    this.rootEl.appendChild(canvas)\n    */\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["CanvasItem","constructor","shotAngle","width","id","t","x","canvas","y","height","incrementTime","animationSpeed","period","move","x_0","power","Math","cos","y_0","sin","g","resetParams","FountainAnimator","props","itemsNumber","spreadAngle","itemsSize","minItemsSize","maxItemsSize","gravity","rotationSpeed","canvasRef","imgSkins","imgSkinsRefs","setCanvasSize","current","window","innerWidth","innerHeight","start","addEventListener"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,EAAnB,EAAuB;AAChC,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKG,CAAL,GAASC,MAAM,CAACJ,KAAP,GAAeA,KAAK,GAAG,CAAhC;AACA,SAAKK,CAAL,GAASD,MAAM,CAACE,MAAhB;AACA,SAAKL,EAAL,GAAUA,EAAV;AACD;;AAEDM,EAAAA,aAAa,GAAG;AACd,SAAKL,CAAL,IAAWM,cAAc,GAAGC,MAAlB,GAA4B,IAAtC;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,SAAKH,aAAL;AACA,SAAKJ,CAAL,GAASQ,GAAG,GAAGC,KAAK,GAAG,KAAKV,CAAb,GAAiBW,IAAI,CAACC,GAAL,CAAS,KAAKf,SAAd,CAAvB,GAAkD,KAAKC,KAAL,GAAa,CAAxE;AACA,SAAKK,CAAL,GACEU,GAAG,GACHH,KAAK,GAAG,KAAKV,CAAb,GAAiBW,IAAI,CAACG,GAAL,CAAS,KAAKjB,SAAd,CADjB,GAECkB,CAAC,GAAG,KAAKf,CAAT,GAAa,KAAKA,CAAnB,GAAwB,CAH1B;;AAIA,QACE,KAAKG,CAAL,GAASU,GAAG,GAAG,IAAI,KAAKf,KAAxB,IACA,KAAKK,CAAL,GAAS,CAAC,CAAD,GAAK,KAAKL,KADnB,IAEA,KAAKG,CAAL,GAASC,MAAM,CAACJ,KAAP,GAAe,IAAI,KAAKA,KAFjC,IAGA,KAAKG,CAAL,GAAS,CAAC,CAAD,GAAK,KAAKH,KAJrB,EAKE;AACA,WAAKkB,WAAL;AACD;AACF;;AA7Bc;;AAgCjB,MAAMC,gBAAN,CAAuB;AACrBrB,EAAAA,WAAW,CAACsB,KAAD,EAAQ;AACjB,SAAKZ,cAAL,GAAsBY,KAAK,CAACZ,cAA5B;AACA,SAAKI,KAAL,GAAaQ,KAAK,CAACR,KAAnB;AACA,SAAKS,WAAL,GAAmBD,KAAK,CAACC,WAAzB;AACA,SAAKC,WAAL,GAAmBF,KAAK,CAACE,WAAzB;AACA,SAAKC,SAAL,GAAiB,CAACH,KAAK,CAACI,YAAP,EAAqBJ,KAAK,CAACK,YAA3B,CAAjB;AACA,SAAKR,CAAL,GAASG,KAAK,CAACM,OAAf;AACA,SAAKC,aAAL,GAAqBP,KAAK,CAACO,aAA3B;AACA,SAAKvB,MAAL,GAAcgB,KAAK,CAACQ,SAApB;AACA,SAAKC,QAAL,GAAgBT,KAAK,CAACU,YAAtB;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,SAAK3B,MAAL,CAAY4B,OAAZ,CAAoBhC,KAApB,GAA4BiC,MAAM,CAACC,UAAnC;AACA,SAAK9B,MAAL,CAAY4B,OAAZ,CAAoB1B,MAApB,GAA6B2B,MAAM,CAACE,WAApC;AACA,SAAKxB,GAAL,GAAWP,MAAM,CAACJ,KAAP,GAAe,CAA1B;AACA,SAAKe,GAAL,GAAWX,MAAM,CAACE,MAAlB;AACD;;AAED8B,EAAAA,KAAK,GAAG;AACN,SAAKL,aAAL;AACAE,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkC,MAAM,KAAKN,aAAL,EAAxC;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACG;;AA/BoB;;AAkCvB,eAAeZ,gBAAf","sourcesContent":["class CanvasItem {\n  constructor(shotAngle, width, id) {\n    this.t = 0\n    this.shotAngle = shotAngle\n    this.width = width\n    this.x = canvas.width - width / 2\n    this.y = canvas.height\n    this.id = id\n  }\n\n  incrementTime() {\n    this.t += (animationSpeed * period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.itemsNumber = props.itemsNumber\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.imgSkins = props.imgSkinsRefs\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n    this.x_0 = canvas.width / 2\n    this.y_0 = canvas.height\n  }\n\n  start() {\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n\n    /*\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n    this.canvas = canvas\n    this.context = context\n    this.rootEl.appendChild(canvas)\n    */\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}