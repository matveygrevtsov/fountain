{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchUser } from './moks';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [pending, setPending] = useState(true);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    fetchUser('0').then(response => setUser(response), () => setUser(null)).finally(() => setPending(false));\n  }, []);\n\n  if (pending) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Loading ...\"\n    }, void 0, false);\n  }\n\n  if (user) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: user.name ? user.name : 'Юзер не найден !'\n  }, void 0, false);\n};\n\n_s(App, \"tQYyuMlKhSWAfojAKnSuRMrXm0o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/App.tsx"],"names":["React","useEffect","useState","fetchUser","App","pending","setPending","user","setUser","then","response","finally","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,QAA1B;;;;AAEA,MAAMC,GAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,SAAS,CAAC,GAAD,CAAT,CACGM,IADH,CAEKC,QAAD,IAAmBF,OAAO,CAACE,QAAD,CAF9B,EAGI,MAAMF,OAAO,CAAC,IAAD,CAHjB,EAKGG,OALH,CAKW,MAAML,UAAU,CAAC,KAAD,CAL3B;AAMD,GAPQ,EAON,EAPM,CAAT;;AASA,MAAID,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA,qBAAP;AACD;;AACD,MAAGE,IAAH,EACA,oBAAO;AAAA,cAAGA,IAAI,CAACK,IAAL,GAAYL,IAAI,CAACK,IAAjB,GAAwB;AAA3B,mBAAP;AACD,CAlBD;;GAAMR,G;;KAAAA,G;AAoBN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { fetchUser } from './moks'\n\nconst App: React.FC<any> = () => {\n  const [pending, setPending] = useState(true)\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    fetchUser('0')\n      .then(\n        (response: any) => setUser(response),\n        () => setUser(null),\n      )\n      .finally(() => setPending(false))\n  }, [])\n\n  if (pending) {\n    return <>Loading ...</>\n  }\n  if(user)\n  return <>{user.name ? user.name : 'Юзер не найден !'}</>\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}