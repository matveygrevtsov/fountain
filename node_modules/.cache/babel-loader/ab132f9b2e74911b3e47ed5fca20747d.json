{"ast":null,"code":"const randomFromInterval = interval => Math.random() * (interval[1] - interval[0]) + interval[0];\n\nconst dispersion = spreadAngle => [Math.PI * (180 - spreadAngle) / 360, Math.PI * (180 + spreadAngle) / 360];\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed;\n    this.power = props.power;\n    this.g = props.gravity;\n    this.rotationSpeed = props.rotationSpeed;\n    this.canvas = props.canvasRef;\n    this.spreadAngle = props.spreadAngle;\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize];\n    this.period = 60; // подумать\n\n    this.setParams();\n  }\n\n  setParams() {\n    this.t = 0;\n    this.shotAngle = randomFromInterval([Math.PI * (180 - this.spreadAngle) / 360, Math.PI * (180 + this.spreadAngle) / 360]);\n    this.width = randomFromInterval(this.itemsSize);\n    this.x = (this.canvas.current.width - this.width) / 2;\n    this.y = this.canvas.current.height;\n  }\n\n  incrementTime() {\n    this.t += this.animationSpeed * this.period / 1000;\n  }\n\n  move() {\n    const canvas = this.canvas.current;\n    this.incrementTime();\n    this.x = (canvas.width - this.width) / 2 + power * this.t * Math.cos(this.shotAngle);\n    this.y = canvas.height - power * this.t * Math.sin(this.shotAngle) + g * this.t * this.t / 2;\n\n    if (this.y > canvas.height + 2 * this.width || this.y < -2 * this.width || this.x > canvas.width + 2 * this.width || this.x < -2 * this.width) {\n      this.setParams();\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d');\n    context.translate(this.x + this.width / 2, this.y + this.width / 2);\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1));\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2);\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width);\n    context.restore();\n    this.move();\n  }\n\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props;\n    this.canvas = props.canvasRef;\n    this.setCanvasSize();\n    window.addEventListener('resize', () => this.setCanvasSize());\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth;\n    this.canvas.current.height = window.innerHeight;\n  }\n\n  start() {\n    //const el = new FountainItem(this.congif)\n    console.log('I`m ready !');\n  }\n\n}\n\nexport default FountainAnimator;","map":{"version":3,"sources":["/home/alex/projects/test_ts_app/src/fountain.js"],"names":["randomFromInterval","interval","Math","random","dispersion","spreadAngle","PI","FountainItem","constructor","props","animationSpeed","power","g","gravity","rotationSpeed","canvas","canvasRef","itemsSize","minItemsSize","maxItemsSize","period","setParams","t","shotAngle","width","x","current","y","height","incrementTime","move","cos","sin","render","context","getContext","translate","rotate","id","drawImage","skin","restore","FountainAnimator","state","setCanvasSize","window","addEventListener","innerWidth","innerHeight","start","console","log"],"mappings":"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","sourcesContent":["const randomFromInterval = (interval) =>\n  Math.random() * (interval[1] - interval[0]) + interval[0]\n\nconst dispersion = (spreadAngle) => [\n  (Math.PI * (180 - spreadAngle)) / 360,\n  (Math.PI * (180 + spreadAngle)) / 360,\n]\n\n/*\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef.current\n    this.context = this.canvas.getContext('2d')\n    this.id = props.id\n    this.skin = props.skin\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    this.incrementTime()\n    this.x = x_0 + power * this.t * Math.cos(this.shotAngle) - this.width / 2\n    this.y =\n      y_0 -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > y_0 + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > this.canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.resetParams()\n    }\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval(dispersion())\n    this.width = randomFromInterval(itemsSize)\n    this.x = this.canvas.width - this.width / 2\n    this.y = this.canvas.height\n  }\n\n  render() {\n    this.context.save()\n    this.context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    this.context.rotate(this.t * rotationSpeed * (2 * (this.id % 2) - 1))\n    this.context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    this.context.drawImage(skin, this.x, this.y, this.width, this.width)\n    this.context.restore()\n    this.move()\n  }\n}*/\n\nclass FountainItem {\n  constructor(props) {\n    this.animationSpeed = props.animationSpeed\n    this.power = props.power\n    this.g = props.gravity\n    this.rotationSpeed = props.rotationSpeed\n    this.canvas = props.canvasRef\n    this.spreadAngle = props.spreadAngle\n    this.itemsSize = [props.minItemsSize, props.maxItemsSize]\n    this.period = 60 // подумать\n    this.setParams()\n  }\n\n  setParams() {\n    this.t = 0\n    this.shotAngle = randomFromInterval([\n      (Math.PI * (180 - this.spreadAngle)) / 360,\n      (Math.PI * (180 + this.spreadAngle)) / 360,\n    ])\n    this.width = randomFromInterval(this.itemsSize)\n    this.x = (this.canvas.current.width - this.width) / 2\n    this.y = this.canvas.current.height\n  }\n\n  incrementTime() {\n    this.t += (this.animationSpeed * this.period) / 1000\n  }\n\n  move() {\n    const canvas = this.canvas.current\n    this.incrementTime()\n    this.x =\n      (canvas.width - this.width) / 2 +\n      power * this.t * Math.cos(this.shotAngle)\n    this.y =\n      canvas.height -\n      power * this.t * Math.sin(this.shotAngle) +\n      (g * this.t * this.t) / 2\n    if (\n      this.y > canvas.height + 2 * this.width ||\n      this.y < -2 * this.width ||\n      this.x > canvas.width + 2 * this.width ||\n      this.x < -2 * this.width\n    ) {\n      this.setParams()\n    }\n  }\n\n  render() {\n    const context = this.canvas.current.getContext('2d')\n    context.translate(this.x + this.width / 2, this.y + this.width / 2)\n    context.rotate(this.t * this.rotationSpeed * (2 * (this.id % 2) - 1))\n    context.translate(-this.x - this.width / 2, -this.y - this.width / 2)\n    context.drawImage(this.skin, this.x, this.y, this.width, this.width)\n    context.restore()\n    this.move()\n  }\n}\n\nclass FountainAnimator {\n  constructor(props) {\n    this.state = props\n    this.canvas = props.canvasRef\n    this.setCanvasSize()\n    window.addEventListener('resize', () => this.setCanvasSize())\n  }\n\n  setCanvasSize() {\n    this.canvas.current.width = window.innerWidth\n    this.canvas.current.height = window.innerHeight\n  }\n\n  start() {\n    //const el = new FountainItem(this.congif)\n    console.log('I`m ready !')\n  }\n}\n\nexport default FountainAnimator\n"]},"metadata":{},"sourceType":"module"}